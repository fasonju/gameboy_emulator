use super::registers::{Flag, Register16, Register8};


// A generic instruction for 8-bit registers
pub enum Instruction {
    // Ld instruction
    LdR8FromR8(Register8, Register8),
    LdR8FromN8(Register8, u8),
    LdR16FromN16(Register16, u16),
    LdMemHlFromR8(Register8),
    LdMemHlFromN8(u8),
    LdR8FromMemHl(Register8),
    LdMemR16FromA(Register16),
    LdMemN16FromA(u16),
    LdhMemN16FromA(u16),
    LdhMemCFromA,
    LdAFromMemR16(Register16),
    LdAFromMemN16(u16),
    LdhAFromMemN16(u16),
    LdhAFromMemC,
    LdMemHliFromA,
    LdMemHldFromA,
    LdAFromMemHli,
    LdAFromMemHld,

    // Arithmetic instructions
    AdcR8(Register8),
    AdcMemHl,
    AdcN8(u8),
    AddR8(Register8),
    AddMemHl,
    AddN8(u8),
    CpR8,
    CpMemHl,
    CpN8(u8),
    DecR8(Register8),
    DecMemHl,
    IncR8(Register8),
    IncMemHl,
    SbcR8(Register8),
    SbcMemHl,
    SbcN8(u8),
    SubR8(Register8),
    SubMemHl,
    SubN8(u8),

    // Bitwise logic instructions
    AndR8(Register8),
    AndMemHl,
    AndN8(u8),
    Cpl,
    OrR8(Register8),
    OrMemHl,
    OrN8(u8),
    XorR8(Register8),
    XorMemHl,
    XorN8(u8),

    // Bitwise flag instructions
    BitU3R8(Register8),
    BitU3MemHl,
    ResU3R8(Register8),
    ResU3MemHl,
    SetU3R8(Register8),
    SetU3MemHl,

    // Rotate and shift instructions
    RlR8(Register8),
    RlMemHl,
    Rla,
    RlcR8(Register8),
    RlcMemHl,
    Rlca,
    RrR8(Register8),
    RrMemHl,
    Rra,
    RrcR8(Register8),
    RrcMemHl,
    Rrca,
    SlaR8(Register8),
    SlaMemHl,
    SraR8(Register8),
    SraMemHl,
    SrlR8(Register8),
    SrlMemHl,
    SwapR8(Register8),
    SwapMemHl,

    // Jump and subroutine instructions
    CallN16(u16),
    CallCcN16(Flag, u16),
    JpHl,
    JpN16(u16),
    JpCcN16(Flag, u16),
    JrN16(u16),
    JrCcN16(Flag, u16),
    RetCc(Flag),
    Ret,
    Reti,
    RstN8(u8),
    CallVec(u16),

    // Stack instructions
    AddHlSp,
    AddSpE8(i8),
    DecSp,
    IncSp,
    LdSpFromN16(u16),
    LdMemN16FromSp(u16),
    LdHlFromSpPlusE8(i8),
    LdSpFromHl,
    PopAf,
    PopR16(Register16),
    PushAf,
    PushR16(Register16),

    // Interrupt related instructions
    Di,
    Ei,
    Halt,

    // Misc instructions
    Daa,
    Nop,
    Stop,
}